"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const introspection_from_url_1 = require("./introspection-from-url");
const introspection_from_file_1 = require("./introspection-from-file");
const schema_from_string_1 = require("./schema-from-string");
const schema_from_typedefs_1 = require("./schema-from-typedefs");
const schema_from_export_1 = require("./schema-from-export");
const debugLog_1 = require("../../utils/debugLog");
var introspection_from_url_2 = require("./introspection-from-url");
exports.IntrospectionFromUrlLoader = introspection_from_url_2.IntrospectionFromUrlLoader;
var introspection_from_file_2 = require("./introspection-from-file");
exports.IntrospectionFromFileLoader = introspection_from_file_2.IntrospectionFromFileLoader;
var schema_from_string_2 = require("./schema-from-string");
exports.SchemaFromString = schema_from_string_2.SchemaFromString;
var schema_from_typedefs_2 = require("./schema-from-typedefs");
exports.SchemaFromTypedefs = schema_from_typedefs_2.SchemaFromTypedefs;
var schema_from_export_2 = require("./schema-from-export");
exports.SchemaFromExport = schema_from_export_2.SchemaFromExport;
exports.loadSchema = async (pointToSchema, options, schemaHandlers = [new introspection_from_url_1.IntrospectionFromUrlLoader(), new introspection_from_file_1.IntrospectionFromFileLoader(), new schema_from_string_1.SchemaFromString(), new schema_from_export_1.SchemaFromExport(), new schema_from_typedefs_1.SchemaFromTypedefs()]) => {
    for (const handler of schemaHandlers) {
        debugLog_1.debugLog(`Trying to use schema handler ${handler.constructor.name}...`);
        const canHandle = await handler.canHandle(pointToSchema);
        debugLog_1.debugLog(`Schema loader ${handler.constructor.name} returned "${canHandle}" for "${pointToSchema}"...`);
        if (canHandle) {
            return handler.handle(pointToSchema, options);
        }
    }
    throw new Error('Failed to load schema');
};
//# sourceMappingURL=index.js.map