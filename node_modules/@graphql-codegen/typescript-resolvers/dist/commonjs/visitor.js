"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoBind = require("auto-bind");
const visitor_plugin_common_1 = require("@graphql-codegen/visitor-plugin-common");
const typescript_1 = require("@graphql-codegen/typescript");
class TypeScriptResolversVisitor extends visitor_plugin_common_1.BaseResolversVisitor {
    constructor(pluginConfig, schema) {
        super(pluginConfig, {
            avoidOptionals: pluginConfig.avoidOptionals || false,
            immutableTypes: pluginConfig.immutableTypes || false,
            useIndexSignature: pluginConfig.useIndexSignature || false,
        }, schema);
        autoBind(this);
        this.setVariablesTransformer(new typescript_1.TypeScriptOperationVariablesToObject(this.config.scalars, this.convertName, this.config.avoidOptionals, this.config.immutableTypes));
        if (this.config.useIndexSignature) {
            this._declarationBlockConfig = {
                blockTransformer(block) {
                    return `ResolversObject<${block}>`;
                },
            };
        }
    }
    formatRootResolver(schemaTypeName, resolverType) {
        return `${schemaTypeName}${this.config.avoidOptionals ? '' : '?'}: ${resolverType},`;
    }
    clearOptional(str) {
        if (str.startsWith('Maybe')) {
            return str.replace(/Maybe<(.*?)>$/, '$1');
        }
        return str;
    }
    ListType(node) {
        return `Maybe<${super.ListType(node)}>`;
    }
    wrapWithListType(str) {
        return `${this.config.immutableTypes ? 'ReadonlyArray' : 'Array'}<${str}>`;
    }
    NamedType(node) {
        return `Maybe<${super.NamedType(node)}>`;
    }
    NonNullType(node) {
        const baseValue = super.NonNullType(node);
        return this.clearOptional(baseValue);
    }
}
exports.TypeScriptResolversVisitor = TypeScriptResolversVisitor;
//# sourceMappingURL=visitor.js.map