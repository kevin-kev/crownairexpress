import gql from 'graphql-tag';
import * as React from 'react';
import * as ReactApollo from 'react-apollo';
export type Maybe<T> = T | null;
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type MyType = {
  __typename?: 'MyType';
  f?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  f?: Maybe<Scalars['String']>;
};
export type MyQueryQueryVariables = {};

export type MyQueryQuery = { __typename?: 'Query' } & Pick<Query, 'f'>;

export const MyQueryDocument = gql`
  query MyQuery {
    f
  }
`;
export type MyQueryComponentProps = Omit<Omit<ReactApollo.QueryProps<MyQueryQuery, MyQueryQueryVariables>, 'query'>, 'variables'> & { variables?: MyQueryQueryVariables };

export const MyQueryComponent = (props: MyQueryComponentProps) => <ReactApollo.Query<MyQueryQuery, MyQueryQueryVariables> query={MyQueryDocument} {...props} />;

export type MyQueryProps<TChildProps = {}> = Partial<ReactApollo.DataProps<MyQueryQuery, MyQueryQueryVariables>> & TChildProps;
export function withMyQuery<TProps, TChildProps = {}>(operationOptions?: ReactApollo.OperationOption<TProps, MyQueryQuery, MyQueryQueryVariables, MyQueryProps<TChildProps>>) {
  return ReactApollo.withQuery<TProps, MyQueryQuery, MyQueryQueryVariables, MyQueryProps<TChildProps>>(MyQueryDocument, {
    alias: 'withMyQuery',
    ...operationOptions,
  });
}
